[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Work in Progress\nThis web contains the code produced for a traffic estimation project for GEO5099.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "1B_Census_data.html",
    "href": "1B_Census_data.html",
    "title": "Census data",
    "section": "",
    "text": "library(sf)\n\nLinking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tmap)\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\nlibrary(MinorRoadTraffic)\n\nLoading the bounds produced from the grouped counts\n\nbounds &lt;- st_read(dsn = \"03_preprocessing_files/bounds.geoJSON\")\n\nReading layer `bounds' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\02_MsC\\99_GEOG5099M_Dissertation\\GEOG5099_Analysis\\03_preprocessing_files\\bounds.geoJSON' \n  using driver `GeoJSON'\nSimple feature collection with 1 feature and 0 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 504412.7 ymin: 426438.9 xmax: 514543.7 ymax: 434827.8\nProjected CRS: OSGB36 / British National Grid\n\n\n\nif(!file.exists(\"02_raw_census/LSOA_selected.geoJSON\")){\ndownload_lsoa_2021 &lt;- function(url = \"https://github.com/juanfonsecaLS1/GEOG5099_Analysis/releases/download/v0/LSOA_Dec_2021_Boundaries_Generalised_Clipped_EW_BGC_2022_5605507071095448309.geojson\",\n                              bounds){\n  \ndir.create(file.path(\"02_raw_census\",\"lsoa\"),recursive = T,showWarnings = F)\n\n  if(!file.exists(file.path(\"02_raw_census\",\"lsoa\",\"LSOA_2021.geojson\"))){\n  utils::download.file(url, destfile = file.path(\"02_raw_census\",\"lsoa\",\"LSOA_2021.geojson\"),\n                       mode = \"wb\")}\n  res = sf::read_sf(file.path(\"02_raw_census\",\"lsoa\",\"LSOA_2021.geojson\"))\n  return(res)\n}\n\nlsoa &lt;- download_lsoa_2021()\n\nlsoa_fixed &lt;- lsoa |&gt; st_make_valid()\nlsoa_selected &lt;- lsoa_fixed[bounds,] \nst_write(lsoa_selected,\"02_raw_census/LSOA_selected.geoJSON\")\n\nrm(lsoa,lsoa_fixed)\n}else{\n  lsoa_selected &lt;- st_read(\"02_raw_census/LSOA_selected.geoJSON\")\n}\n\nReading layer `LSOA_selected' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\02_MsC\\99_GEOG5099M_Dissertation\\GEOG5099_Analysis\\02_raw_census\\LSOA_selected.geoJSON' \n  using driver `GeoJSON'\nSimple feature collection with 154 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 502749.4 ymin: 426282.2 xmax: 515986.2 ymax: 435961.4\nProjected CRS: OSGB36 / British National Grid\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_basemap(\"OpenStreetMap\")+\n  tm_shape(lsoa_selected)+\n  tm_polygons(col = \"blue\",\n              alpha = 0.3,\n              border.col = \"blue\")",
    "crumbs": [
      "Preprocessing",
      "Census data"
    ]
  },
  {
    "objectID": "1B_Census_data.html#lsoa-boundaries",
    "href": "1B_Census_data.html#lsoa-boundaries",
    "title": "Census data",
    "section": "",
    "text": "library(sf)\n\nLinking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tmap)\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\nlibrary(MinorRoadTraffic)\n\nLoading the bounds produced from the grouped counts\n\nbounds &lt;- st_read(dsn = \"03_preprocessing_files/bounds.geoJSON\")\n\nReading layer `bounds' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\02_MsC\\99_GEOG5099M_Dissertation\\GEOG5099_Analysis\\03_preprocessing_files\\bounds.geoJSON' \n  using driver `GeoJSON'\nSimple feature collection with 1 feature and 0 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 504412.7 ymin: 426438.9 xmax: 514543.7 ymax: 434827.8\nProjected CRS: OSGB36 / British National Grid\n\n\n\nif(!file.exists(\"02_raw_census/LSOA_selected.geoJSON\")){\ndownload_lsoa_2021 &lt;- function(url = \"https://github.com/juanfonsecaLS1/GEOG5099_Analysis/releases/download/v0/LSOA_Dec_2021_Boundaries_Generalised_Clipped_EW_BGC_2022_5605507071095448309.geojson\",\n                              bounds){\n  \ndir.create(file.path(\"02_raw_census\",\"lsoa\"),recursive = T,showWarnings = F)\n\n  if(!file.exists(file.path(\"02_raw_census\",\"lsoa\",\"LSOA_2021.geojson\"))){\n  utils::download.file(url, destfile = file.path(\"02_raw_census\",\"lsoa\",\"LSOA_2021.geojson\"),\n                       mode = \"wb\")}\n  res = sf::read_sf(file.path(\"02_raw_census\",\"lsoa\",\"LSOA_2021.geojson\"))\n  return(res)\n}\n\nlsoa &lt;- download_lsoa_2021()\n\nlsoa_fixed &lt;- lsoa |&gt; st_make_valid()\nlsoa_selected &lt;- lsoa_fixed[bounds,] \nst_write(lsoa_selected,\"02_raw_census/LSOA_selected.geoJSON\")\n\nrm(lsoa,lsoa_fixed)\n}else{\n  lsoa_selected &lt;- st_read(\"02_raw_census/LSOA_selected.geoJSON\")\n}\n\nReading layer `LSOA_selected' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\02_MsC\\99_GEOG5099M_Dissertation\\GEOG5099_Analysis\\02_raw_census\\LSOA_selected.geoJSON' \n  using driver `GeoJSON'\nSimple feature collection with 154 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 502749.4 ymin: 426282.2 xmax: 515986.2 ymax: 435961.4\nProjected CRS: OSGB36 / British National Grid\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_basemap(\"OpenStreetMap\")+\n  tm_shape(lsoa_selected)+\n  tm_polygons(col = \"blue\",\n              alpha = 0.3,\n              border.col = \"blue\")",
    "crumbs": [
      "Preprocessing",
      "Census data"
    ]
  },
  {
    "objectID": "1B_Census_data.html#downloading-data",
    "href": "1B_Census_data.html#downloading-data",
    "title": "Census data",
    "section": "Downloading Data",
    "text": "Downloading Data\nThe following code downloads the 2021 Census data.\n\nPopulation TS001\n\ndir.create(file.path(\"02_raw_census\",\"census\"),recursive = T,showWarnings = F)\nif(!file.exists(file.path(\"02_raw_census\",\n                              \"census\",\n                              \"pop_2021.zip\"))){\ndownload.file(\"https://www.nomisweb.co.uk/output/census/2021/census2021-ts001.zip\",\n              destfile = file.path(\"02_raw_census\",\"census\",\"pop_2021.zip\"),\n                       mode = \"wb\")}\n\npop &lt;- read_csv(unz(file.path(\"02_raw_census\",\n                              \"census\",\n                              \"pop_2021.zip\"),\n                    \"census2021-ts001-lsoa.csv\"),\n                col_types = cols(\n  date = col_double(),\n  geography = col_character(),\n  `geography code` = col_character(),\n  `Residence type: Total; measures: Value` = col_double(),\n  `Residence type: Lives in a household; measures: Value` = col_double(),\n  `Residence type: Lives in a communal establishment; measures: Value` = col_double()\n)\n) |&gt; rename_with(.cols = starts_with(\"Residence\"),\n                 ~ gsub(\"Residence type: \",\"\",.x))|&gt; \n  tibble(.name_repair = \"universal\")\n\nNew names:\n• `geography code` -&gt; `geography.code`\n• `Total; measures: Value` -&gt; `Total..measures..Value`\n• `Lives in a household; measures: Value` -&gt;\n  `Lives.in.a.household..measures..Value`\n• `Lives in a communal establishment; measures: Value` -&gt;\n  `Lives.in.a.communal.establishment..measures..Value`\n\n\n\n\nExmployment Status TS066\n\nif(!file.exists(file.path(\"02_raw_census\",\"census\",\"employment_2021.zip\"))){\n  download.file(\"https://www.nomisweb.co.uk/output/census/2021/census2021-ts066.zip\",\n              destfile = file.path(\"02_raw_census\",\"census\",\"employment_2021.zip\"),\n                       mode = \"wb\")}\n\nemploy &lt;- read_csv(unz(file.path(\"02_raw_census\",\n                              \"census\",\n                              \"employment_2021.zip\"),\n                    \"census2021-ts066-lsoa.csv\")\n,\ncol_types = cols(\n  date = col_double(),\n  geography = col_character(),\n  `geography code` = col_character(),\n  `Economic activity status: Total: All usual residents aged 16 years and over` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students)` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students):In employment` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students):In employment:Employee` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students): In employment: Employee: Part-time` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students): In employment: Employee: Full-time` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students):In employment:Self-employed with employees` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students): In employment: Self-employed with employees: Part-time` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students): In employment: Self-employed with employees: Full-time` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students):In employment:Self-employed without employees` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students): In employment: Self-employed without employees: Part-time` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students): In employment: Self-employed without employees: Full-time` = col_double(),\n  `Economic activity status: Economically active (excluding full-time students): Unemployed` = col_double(),\n  `Economic activity status: Economically active and a full-time student` = col_double(),\n  `Economic activity status: Economically active and a full-time student:In employment` = col_double(),\n  `Economic activity status: Economically active and a full-time student:In employment:Employee` = col_double(),\n  `Economic activity status: Economically active and a full-time student: In employment: Employee: Part-time` = col_double(),\n  `Economic activity status: Economically active and a full-time student: In employment: Employee: Full-time` = col_double(),\n  `Economic activity status: Economically active and a full-time student:In employment:Self-employed with employees` = col_double(),\n  `Economic activity status: Economically active and a full-time student: In employment: Self-employed with employees: Part-time` = col_double(),\n  `Economic activity status: Economically active and a full-time student: In employment: Self-employed with employees: Full-time` = col_double(),\n  `Economic activity status: Economically active and a full-time student:In employment:Self-employed without employees` = col_double(),\n  `Economic activity status: Economically active and a full-time student: In employment: Self-employed without employees: Part-time` = col_double(),\n  `Economic activity status: Economically active and a full-time student: In employment: Self-employed without employees: Full-time` = col_double(),\n  `Economic activity status: Economically active and a full-time student: Unemployed` = col_double(),\n  `Economic activity status: Economically inactive` = col_double(),\n  `Economic activity status: Economically inactive: Retired` = col_double(),\n  `Economic activity status: Economically inactive: Student` = col_double(),\n  `Economic activity status: Economically inactive: Looking after home or family` = col_double(),\n  `Economic activity status: Economically inactive: Long-term sick or disabled` = col_double(),\n  `Economic activity status: Economically inactive: Other` = col_double()\n)\n) |&gt; rename_with(.cols = starts_with(\"Economic\"),\n                 ~ gsub(\"Economic activity status: \",\"\",.x))|&gt; \n  tibble(.name_repair = \"universal\")\n\nNew names:\n• `geography code` -&gt; `geography.code`\n• `Total: All usual residents aged 16 years and over` -&gt;\n  `Total..All.usual.residents.aged.16.years.and.over`\n• `Economically active (excluding full-time students)` -&gt;\n  `Economically.active..excluding.full.time.students.`\n• `Economically active (excluding full-time students):In employment` -&gt;\n  `Economically.active..excluding.full.time.students..In.employment`\n• `Economically active (excluding full-time students):In employment:Employee`\n  -&gt;\n  `Economically.active..excluding.full.time.students..In.employment.Employee`\n• `Economically active (excluding full-time students): In employment: Employee:\n  Part-time` -&gt;\n  `Economically.active..excluding.full.time.students...In.employment..Employee..Part.time`\n• `Economically active (excluding full-time students): In employment: Employee:\n  Full-time` -&gt;\n  `Economically.active..excluding.full.time.students...In.employment..Employee..Full.time`\n• `Economically active (excluding full-time students):In\n  employment:Self-employed with employees` -&gt;\n  `Economically.active..excluding.full.time.students..In.employment.Self.employed.with.employees`\n• `Economically active (excluding full-time students): In employment:\n  Self-employed with employees: Part-time` -&gt;\n  `Economically.active..excluding.full.time.students...In.employment..Self.employed.with.employees..Part.time`\n• `Economically active (excluding full-time students): In employment:\n  Self-employed with employees: Full-time` -&gt;\n  `Economically.active..excluding.full.time.students...In.employment..Self.employed.with.employees..Full.time`\n• `Economically active (excluding full-time students):In\n  employment:Self-employed without employees` -&gt;\n  `Economically.active..excluding.full.time.students..In.employment.Self.employed.without.employees`\n• `Economically active (excluding full-time students): In employment:\n  Self-employed without employees: Part-time` -&gt;\n  `Economically.active..excluding.full.time.students...In.employment..Self.employed.without.employees..Part.time`\n• `Economically active (excluding full-time students): In employment:\n  Self-employed without employees: Full-time` -&gt;\n  `Economically.active..excluding.full.time.students...In.employment..Self.employed.without.employees..Full.time`\n• `Economically active (excluding full-time students): Unemployed` -&gt;\n  `Economically.active..excluding.full.time.students...Unemployed`\n• `Economically active and a full-time student` -&gt;\n  `Economically.active.and.a.full.time.student`\n• `Economically active and a full-time student:In employment` -&gt;\n  `Economically.active.and.a.full.time.student.In.employment`\n• `Economically active and a full-time student:In employment:Employee` -&gt;\n  `Economically.active.and.a.full.time.student.In.employment.Employee`\n• `Economically active and a full-time student: In employment: Employee:\n  Part-time` -&gt;\n  `Economically.active.and.a.full.time.student..In.employment..Employee..Part.time`\n• `Economically active and a full-time student: In employment: Employee:\n  Full-time` -&gt;\n  `Economically.active.and.a.full.time.student..In.employment..Employee..Full.time`\n• `Economically active and a full-time student:In employment:Self-employed with\n  employees` -&gt;\n  `Economically.active.and.a.full.time.student.In.employment.Self.employed.with.employees`\n• `Economically active and a full-time student: In employment: Self-employed\n  with employees: Part-time` -&gt;\n  `Economically.active.and.a.full.time.student..In.employment..Self.employed.with.employees..Part.time`\n• `Economically active and a full-time student: In employment: Self-employed\n  with employees: Full-time` -&gt;\n  `Economically.active.and.a.full.time.student..In.employment..Self.employed.with.employees..Full.time`\n• `Economically active and a full-time student:In employment:Self-employed\n  without employees` -&gt;\n  `Economically.active.and.a.full.time.student.In.employment.Self.employed.without.employees`\n• `Economically active and a full-time student: In employment: Self-employed\n  without employees: Part-time` -&gt;\n  `Economically.active.and.a.full.time.student..In.employment..Self.employed.without.employees..Part.time`\n• `Economically active and a full-time student: In employment: Self-employed\n  without employees: Full-time` -&gt;\n  `Economically.active.and.a.full.time.student..In.employment..Self.employed.without.employees..Full.time`\n• `Economically active and a full-time student: Unemployed` -&gt;\n  `Economically.active.and.a.full.time.student..Unemployed`\n• `Economically inactive` -&gt; `Economically.inactive`\n• `Economically inactive: Retired` -&gt; `Economically.inactive..Retired`\n• `Economically inactive: Student` -&gt; `Economically.inactive..Student`\n• `Economically inactive: Looking after home or family` -&gt;\n  `Economically.inactive..Looking.after.home.or.family`\n• `Economically inactive: Long-term sick or disabled` -&gt;\n  `Economically.inactive..Long.term.sick.or.disabled`\n• `Economically inactive: Other` -&gt; `Economically.inactive..Other`\n\n\n\n\nCar Availability TS045\n\nif(!file.exists(file.path(\"02_raw_census\",\"census\",\"car_avail_2021.zip\"))){\n  download.file(\"https://www.nomisweb.co.uk/output/census/2021/census2021-ts045.zip\",\n              destfile = file.path(\"02_raw_census\",\"census\",\"car_avail_2021.zip\"),\n                       mode = \"wb\")\n  }\ncar_avail &lt;- read_csv(unz(file.path(\"02_raw_census\",\n                              \"census\",\n                              \"car_avail_2021.zip\"),\n                    \"census2021-ts045-lsoa.csv\"),\n                    col_types = cols(\n  date = col_double(),\n  geography = col_character(),\n  `geography code` = col_character(),\n  `Number of cars or vans: Total: All households` = col_double(),\n  `Number of cars or vans: No cars or vans in household` = col_double(),\n  `Number of cars or vans: 1 car or van in household` = col_double(),\n  `Number of cars or vans: 2 cars or vans in household` = col_double(),\n  `Number of cars or vans: 3 or more cars or vans in household` = col_double()\n)\n) |&gt; rename_with(.cols = starts_with(\"Number\"),\n                 ~ gsub(\"Number of cars or vans: \",\"\",.x))|&gt; \n  tibble(.name_repair = \"universal\")\n\nNew names:\n• `geography code` -&gt; `geography.code`\n• `Total: All households` -&gt; `Total..All.households`\n• `No cars or vans in household` -&gt; `No.cars.or.vans.in.household`\n• `1 car or van in household` -&gt; `..1.car.or.van.in.household`\n• `2 cars or vans in household` -&gt; `..2.cars.or.vans.in.household`\n• `3 or more cars or vans in household` -&gt;\n  `..3.or.more.cars.or.vans.in.household`\n\n\n\n\nMethod to work (mode) TS061\n\nif(!file.exists(file.path(\"02_raw_census\",\"census\",\"comm_mode_2021.zip\"))){\n  download.file(\"https://www.nomisweb.co.uk/output/census/2021/census2021-ts061.zip\",\n              destfile = file.path(\"02_raw_census\",\"census\",\"comm_mode_2021.zip\"),\n                       mode = \"wb\")\n  }\ncomm_mode &lt;- read_csv(\n  unz(file.path(\"02_raw_census\",\n                \"census\",\n                \"comm_mode_2021.zip\"),\n      \"census2021-ts061-lsoa.csv\",),\n  col_types = cols(\n    date = col_double(),\n    geography = col_character(),\n    `geography code` = col_character(),\n    `Method of travel to workplace: Total: All usual residents aged 16 years and over in employment the week before the census` = col_double(),\n    `Method of travel to workplace: Work mainly at or from home` = col_double(),\n    `Method of travel to workplace: Underground, metro, light rail, tram` = col_double(),\n    `Method of travel to workplace: Train` = col_double(),\n    `Method of travel to workplace: Bus, minibus or coach` = col_double(),\n    `Method of travel to workplace: Taxi` = col_double(),\n    `Method of travel to workplace: Motorcycle, scooter or moped` = col_double(),\n    `Method of travel to workplace: Driving a car or van` = col_double(),\n    `Method of travel to workplace: Passenger in a car or van` = col_double(),\n    `Method of travel to workplace: Bicycle` = col_double(),\n    `Method of travel to workplace: On foot` = col_double(),\n    `Method of travel to workplace: Other method of travel to work` = col_double()\n  )\n  ) |&gt;\n  rename_with(.cols = starts_with(\"Method\"),\n              ~ gsub(\"Method of travel to workplace: \",\"\",.x)) |&gt; \n  tibble(.name_repair = \"universal\")\n\nNew names:\n• `geography code` -&gt; `geography.code`\n• `Total: All usual residents aged 16 years and over in employment the week\n  before the census` -&gt;\n  `Total..All.usual.residents.aged.16.years.and.over.in.employment.the.week.before.the.census`\n• `Work mainly at or from home` -&gt; `Work.mainly.at.or.from.home`\n• `Underground, metro, light rail, tram` -&gt;\n  `Underground..metro..light.rail..tram`\n• `Bus, minibus or coach` -&gt; `Bus..minibus.or.coach`\n• `Motorcycle, scooter or moped` -&gt; `Motorcycle..scooter.or.moped`\n• `Driving a car or van` -&gt; `Driving.a.car.or.van`\n• `Passenger in a car or van` -&gt; `Passenger.in.a.car.or.van`\n• `On foot` -&gt; `On.foot`\n• `Other method of travel to work` -&gt; `Other.method.of.travel.to.work`\n\n\n\n\nData from Place-based Carbon Calculator\n\npbcc &lt;- download_pbcc() |&gt;\n  semi_join(lsoa_selected,by = c(\"LSOA11NM\"=\"LSOA21NM\"))",
    "crumbs": [
      "Preprocessing",
      "Census data"
    ]
  },
  {
    "objectID": "1B_Census_data.html#pre-processing",
    "href": "1B_Census_data.html#pre-processing",
    "title": "Census data",
    "section": "Pre-processing",
    "text": "Pre-processing\n\nSub-setting the census data\n\nPopulation\n\nlsoa_pop &lt;- pop |&gt;\n  semi_join(lsoa_selected, by = c(\"geography.code\"=\"LSOA21CD\")) |&gt;\n  select(geography.code,Total..measures..Value) |&gt; \n  rename(total_pop = Total..measures..Value)\n\n\n\nEmployment status\n\nlsoa_employ &lt;- employ |&gt;\n  semi_join(lsoa_selected, by = c(\"geography.code\"=\"LSOA21CD\")) |&gt;\n  select(geography.code, Economically.active..excluding.full.time.students..In.employment) |&gt; \n  rename(total_employed = Economically.active..excluding.full.time.students..In.employment)\n\n\n\nCar Availability\n\nlsoa_car_avail &lt;- car_avail |&gt;\n  semi_join(lsoa_selected, by = c(\"geography.code\"=\"LSOA21CD\")) |&gt;\n  mutate(car_avail_perc = (Total..All.households-No.cars.or.vans.in.household)/Total..All.households) |&gt; \n  select(geography.code,car_avail_perc)\n\n\n\nMethot to travel to work\n\nlsoa_comm_mode &lt;- comm_mode |&gt;\n  semi_join(lsoa_selected, by = c(\"geography.code\"=\"LSOA21CD\")) |&gt; \n  mutate(car_comm_perc = (Taxi+Driving.a.car.or.van+Passenger.in.a.car.or.van)/Total..All.usual.residents.aged.16.years.and.over.in.employment.the.week.before.the.census) |&gt; \n  select(geography.code,car_comm_perc)\n\n\n\nCarbon Calculator\n\nlsoa_pbcc &lt;- pbcc |&gt; select(LSOA11,cars_percap_2018)\n\n\n\n\nConsolidating and saving Results\n\nLSOA_data &lt;- lsoa_selected |&gt; \n  left_join(\n    lsoa_pop |&gt; \n  left_join(lsoa_employ,by=\"geography.code\") |&gt; \n  left_join(lsoa_car_avail,by=\"geography.code\")  |&gt; \n  left_join(lsoa_comm_mode,by=\"geography.code\") |&gt; \n  left_join(lsoa_pbcc, by=c(\"geography.code\"=\"LSOA11\")),by = c(\"LSOA21CD\"=\"geography.code\"))\n\n\nfile.remove(\"03_preprocessing_files/LSOA_data.geoJSON\")\n\n[1] TRUE\n\nst_write(LSOA_data,\"03_preprocessing_files/LSOA_data.geoJSON\")\n\nWriting layer `LSOA_data' to data source \n  `03_preprocessing_files/LSOA_data.geoJSON' using driver `GeoJSON'\nWriting 154 features with 9 fields and geometry type Multi Polygon.\n\n\n\n\nSome visualisations of the data\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(LSOA_data)+\n  tm_polygons(col = \"total_pop\",\n              border.col = \"white\",\n              palette = \"Blues\",\n              title = \"Total Population 2021\")\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(LSOA_data)+\n  tm_polygons(col = \"total_employed\",\n              border.col = \"white\",\n              palette = \"Greens\",\n              title = \"Total people Employed 2021\")\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(LSOA_data)+\n  tm_polygons(col = \"car_avail_perc\",\n              border.col = \"white\",\n              palette = \"Reds\",\n              title = \"Car available in %households\")\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(LSOA_data)+\n  tm_polygons(col = \"car_comm_perc\",\n              border.col = \"white\",\n              palette = \"YlGn\",\n              title = \"Car commuting split %\")\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_basemap(\"Esri.WorldGrayCanvas\")+\ntm_shape(LSOA_data)+\n  tm_polygons(col = \"cars_percap_2018\",\n              border.col = \"white\",\n              palette = c(\"yellow\", \"darkgreen\"),\n              title = \"Cars per Capita 2018\")",
    "crumbs": [
      "Preprocessing",
      "Census data"
    ]
  },
  {
    "objectID": "0C_Estimator_selection.html#geographically-weighted-poisson-regression-gwpr",
    "href": "0C_Estimator_selection.html#geographically-weighted-poisson-regression-gwpr",
    "title": "Estimator Selection",
    "section": "Geographically Weighted Poisson Regression (GWPR)",
    "text": "Geographically Weighted Poisson Regression (GWPR)",
    "crumbs": [
      "Estimation models",
      "Estimator Selection"
    ]
  },
  {
    "objectID": "0C_Estimator_selection.html#bayesian",
    "href": "0C_Estimator_selection.html#bayesian",
    "title": "Estimator Selection",
    "section": "Bayesian",
    "text": "Bayesian",
    "crumbs": [
      "Estimation models",
      "Estimator Selection"
    ]
  },
  {
    "objectID": "0A_Causal_model.html",
    "href": "0A_Causal_model.html",
    "title": "Causal Model",
    "section": "",
    "text": "Attaching package: 'ggdag'\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\n\n\n\n\n\n\n\nWhere:\n\n\\(T\\) is the traffic flow on a minor road,\n\\(P\\) is the population living along the minor road,\n\\(E\\) employees and working owners along the minor road,\n\\(V\\) the cars available along the minor road,\n\\(M\\) the traffic flow of the nearest major road with observed traffic,\n\\(J\\) the distance to the nearest minor-major road junction,\n\\(D\\) the road density in the LSOA where the minor road is located, and\n\\(C\\) is the standardised centrality of the minor road link.",
    "crumbs": [
      "Estimation models",
      "Causal Model"
    ]
  },
  {
    "objectID": "0B_Data_sources.html#road-network",
    "href": "0B_Data_sources.html#road-network",
    "title": "Data Sources",
    "section": "Road Network",
    "text": "Road Network",
    "crumbs": [
      "Estimation models",
      "Data Sources"
    ]
  },
  {
    "objectID": "0B_Data_sources.html#socio-economic-data",
    "href": "0B_Data_sources.html#socio-economic-data",
    "title": "Data Sources",
    "section": "Socio-Economic Data",
    "text": "Socio-Economic Data",
    "crumbs": [
      "Estimation models",
      "Data Sources"
    ]
  },
  {
    "objectID": "1A_Count_data.html",
    "href": "1A_Count_data.html",
    "title": "Count Data",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rjson)\nlibrary(httr)\nlibrary(sf)\n\nLinking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n\nlibrary(tmap)\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\n\n\nSensor summary\nThe following code loads the file with the summary of scoot loop sensors in Hull\n\nloop_Locations  &lt;- GET(\"https://opendata.hullcc.gov.uk/dataset/30fd3969-556d-4eae-ae4c-f3f9d2cfa9e3/resource/90e1cce0-295e-4fa7-aa21-ebc4f3e8e8d4/download/scoot_loop_resources_full.json\")\n\nmy_response &lt;- rjson::fromJSON(content(loop_Locations,'text',encoding = \"UTF-8\"))\n\nmy_data &lt;- data.frame(do.call(rbind,\n                             lapply(my_response,\n                                    rbind))) |&gt;\n  unnest(cols = everything()) |&gt;\n  filter(longitude != 0)\n\nA spatial object is created using the coordinates of the sites\n\nsf_cameras &lt;- my_data |&gt; \n  st_as_sf(\n    coords = c(\"longitude\",\"latitude\"),\n    crs = 4326) |&gt;\n  st_transform(crs = 27700)\n\n\ntm_basemap() +\n        tm_shape(sf_cameras) +\n        tm_dots()\n\n\n\n\n\n\n\n\nThere are some issues with the coordinates of some sites. The following code fixes the problem\n\nmy_data[my_data$latitude&lt;0,c(\"longitude\",\"latitude\")] &lt;- rev(my_data[my_data$latitude&lt;0,c(\"longitude\",\"latitude\")])\n\nThe description column contain useful information on the location of each sensor, this can be used to identify sensors corresponding to different lanes in the same road, for example.\n\nmy_data_expanded &lt;- my_data |&gt;\n  mutate(description = str_replace(description,\"HE SITE - \",\"HE SITE _ \")) |&gt; \n  separate_wider_delim(description,delim = \" - \",names = c(\"desc\",\"direction\",\"url\",\"coord\")) |&gt;\n  select(-coord)\n\n\nsf_sensors_raw &lt;- my_data_expanded |&gt; \n  st_as_sf(\n    coords = c(\"longitude\",\"latitude\"),\n    crs = 4326) |&gt;\n  st_transform(crs = 27700)\n\ntm_basemap(\"OpenStreetMap\") +\n        tm_shape(sf_sensors_raw) +\n        tm_dots()\n\n\n\n\n\n\n\n\n\nGrouping sensors\n\nsensors_buffer = sf_sensors_raw |&gt;\n  st_buffer(dist = 20)\n\n\ntm_basemap(\"OpenStreetMap\") +\n  tm_shape(sensors_buffer |&gt; \n             filter(name %in% c(\"N44131F\",\"N44131X\",\"N44131H\"))) +\n        tm_polygons(alpha = 0.4)+\n        tm_shape(sf_sensors_raw) +\n        tm_dots()\n\n\n\n\n\n\n\n\n\nbuffer_groups  &lt;- st_cast(st_union(sensors_buffer),\"POLYGON\")\nsensors_overlap &lt;- st_intersects(buffer_groups,sf_sensors_raw)\nsensors_overlap\n\nSparse geometry binary predicate list of length 189, where the\npredicate was `intersects'\nfirst 10 elements:\n 1: 285\n 2: 287\n 3: 286\n 4: 12\n 5: 5\n 6: 40\n 7: 15, 17\n 8: 13, 16\n 9: 14\n 10: 9\n\n\n\n\nFlow Direction refining\nThe description of the count sites refers to the junction where the induction loops are installed, and not necessarily correspond to actual road where they are installed.\nThe sites shown in the map below, for example, are all described as “TSI047 COUNTY ROAD / BRICKNALL AVE”, but they correspond to the four arms of the junction with sensors on Fairfax Ave, Bricknell Ave, and National Ave.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_basemap(\"OpenStreetMap\")+\n  tm_shape(sf_sensors_raw |&gt;\n             filter(str_detect(desc,\"TSI047 COUNTY ROAD / BRICKNALL AVE\")))+\n  tm_dots(col = \"darkgreen\",\n          size = 2,\n          alpha = 0.7,\n          group = \"Selected sites\")\n\n\n\n\n\nAlso, the direction of the different counts, in some cases, refer to the specific lane where the sensors are installed. Therefore, it is useful to extract the flow direction from description.\nSome count points need to be adjusted manually: - there is no a valid description of the direction of sensor N43121Y. See this. - there is a typo (wesbound instead of westbound) in the direction of sensors N40134Fand N45131D.\n\nmy_data_expanded$direction[my_data_expanded$name == \"N43121Y\"] &lt;- \"EASTBOUND\"\nmy_data_expanded$direction[my_data_expanded$name %in% c(\"N40134F\", \"N45131D\")] &lt;- \"WESTBOUND\"\n\n\nmy_data_expanded_dir &lt;- my_data_expanded |&gt; \n  mutate(dir_str = str_to_lower(direction) |&gt; \n           str_extract(pattern = \"\\\\b\\\\w*bound\\\\b\")) |&gt; \n  mutate(origin_str = if_else(is.na(dir_str),\n                           direction |&gt; \n                             str_remove(\"TRAVEL{1,3}ING \") |&gt;\n                             str_remove(\"\\\\sINTENDING\") |&gt;\n                             str_extract(\"\\\\w*(\\\\s)?\\\\w*\\\\b(?=\\\\sTO)\"),\n                           NA)) |&gt; \n  mutate(dir_str = case_when(is.na(dir_str)&origin_str==\"EAST\"~\"westbound\",\n                             is.na(dir_str)&origin_str==\"NORTH\"~\"southbound\",\n                             is.na(dir_str)&origin_str==\"SOUTH WEST\"~\"northeastbound\",\n                             is.na(dir_str)&origin_str==\"SOUTH\"~\"northbound\",\n                             is.na(dir_str)&origin_str==\"WEST\"~\"eastbound\",\n                             is.na(dir_str)&origin_str==\"SOUTH NORTH\"~\"northbound\",\n                             is.na(dir_str)&str_detect(direction,\"FROM THE NORTH\")~\"southbound\",\n                             is.na(dir_str)&str_detect(direction,\"FROM THE SOUTH\")~\"northbound\",\n                             is.na(dir_str)&str_detect(direction,\"FROM THE EAST\")~\"westbound\",\n                             is.na(dir_str)&str_detect(direction,\"FROM THE WEST\")~\"eastbound\",\n                             TRUE ~ dir_str)) |&gt; \n  select(-origin_str)\n\n\ndir_groups &lt;- do.call(bind_rows,\n                      lapply(seq_along(sensors_overlap),\n                             function(i){\n                               tsensor &lt;-  sensors_overlap[[i]]\n                               id_group  &lt;- i\n                               tmp_group &lt;- my_data_expanded_dir[tsensor,] |&gt;\n                                 mutate(subgroup_id = cur_group_id(),\n                                        group_id = id_group,\n                                        .by = c(desc,dir_str)) |&gt;\n                                 select(name,desc,dir_str,group_id,subgroup_id)\n                               })) \n\n\nsf_counts &lt;- my_data_expanded_dir |&gt; \n  left_join(dir_groups,by = join_by(name,desc,dir_str)) |&gt; \n  summarise(across(ends_with(\"itude\"),mean),\n            .by = c(group_id,subgroup_id,desc,dir_str)) |&gt; \n  st_as_sf(\n    coords = c(\"longitude\",\"latitude\"),\n    crs = 4326) |&gt;\n  st_transform(crs = 27700)\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_basemap(\"OpenStreetMap\")+\n  tm_shape(sf_counts) +\n  tm_dots()\n\n\n\n\n\n\n\n\n\n\n\nDownloading data\nSince the open data platform hosting the counts data is based on CKAN, the raw CSV files can be downloaded directly with the following code (see this):\n\ndir.create(\"02_raw_data_counts\", showWarnings = F)\n\nbase_url &lt;- \"https://opendata.hullcc.gov.uk/datastore/dump/\"\nbase_path &lt;- \"02_raw_data_counts\"\n\n\n# In case files are downloaded separately \ndownloaded_files &lt;- list.files(\"02_raw_data_counts/\")\nids_download &lt;- my_data$resource_id[!(my_data$name %in% gsub(\"\\\\.csv\",\"\",x = downloaded_files))]\n\n# Loop for downloading files\nif (!identical(ids_download, character(0))) {\n  for (id in ids_download) {\n    try(download.file(\n      url = paste0(base_url, id),\n      destfile = paste0(base_path,\n                        \"/\",\n                        my_data$name[my_data$resource_id == id],\n                        \".csv\")\n    ))\n  }\n} \n\n\n\nPre-processing\nFirst, we upload the downloaded_files object with all the files available\n\ndownloaded_files_full &lt;- list.files(\"02_raw_data_counts/\",full.names = T)\n\n\nlibrary(data.table)\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:lubridate':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\nThe following object is masked from 'package:purrr':\n\n    transpose\n\nlibrary(dtplyr)\n\nsetDTthreads(0)\n\nraw_data &lt;- rbindlist(lapply(downloaded_files_full,fread))\n\nWarning in FUN(X[[i]], ...): Discarded single-line footer: &lt;&lt;3225&gt;&gt;\n\nhead(raw_data)\n\n     _id  LinkID AttributeID TravelTime VehicleFlow Speed     MeasurementTime\n   &lt;int&gt;  &lt;char&gt;       &lt;int&gt;      &lt;int&gt;       &lt;int&gt; &lt;int&gt;              &lt;POSc&gt;\n1:     1 N10111A     9601773          0           0     0 2020-02-07 15:38:00\n2:     2 N10111A     9601773          0           0    80 2020-02-07 16:49:14\n3:     3 N10111A     9601773          0           0    80 2020-02-07 16:59:14\n4:     4 N10111A     9601773          0           0    80 2020-02-07 17:04:14\n5:     5 N10111A     9601773          0           0    80 2020-02-07 17:09:14\n6:     6 N10111A     9601773         70           9    80 2020-02-07 17:19:14\n    Timestamp\n        &lt;int&gt;\n1: 1581089880\n2: 1581094154\n3: 1581094754\n4: 1581095054\n5: 1581095354\n6: 1581095954\n\n\nSome general checks of the data\nNumber of sites in the raw data:\n\nraw_data$LinkID |&gt; unique() |&gt; length()\n\n[1] 296\n\n\nRange of dates:\n\nraw_data$MeasurementTime |&gt; range()\n\n[1] \"2020-02-07 15:38:00 UTC\" \"2024-01-09 19:30:00 UTC\"\n\n\n\nCollection rate check\nA check of the number of records per site\n\nhist(raw_data |&gt;\n       summarise(records = n(),.by = LinkID) |&gt;\n       as_tibble() |&gt;\n       pull(records),breaks = seq(0,350000,1000),\n     xlab = \"Number of records\",\n     main = \"Distribution of total records per LinkID\")\n\n\n\n\n\n\n\n\nA closer look to the sites with a low number of records:\n\nlow_records_IDs &lt;- raw_data |&gt;\n  filter(between(year(MeasurementTime),2022,2023)) |&gt; \n  summarise(records = n(),.by = LinkID) |&gt;\n  filter(records &lt; 150000) |&gt; \n  as_tibble() |&gt; \n  pull(LinkID)\n\nlow_records_IDs\n\n [1] \"N10221X\" \"N30121C\" \"N48111F\" \"N48111G\" \"N48112B\" \"N48112C\" \"N48112D\"\n [8] \"N48112E\" \"N70111A\" \"N70111B\" \"N70111C\" \"N70111D\" \"N70121F\" \"N70121H\"\n[15] \"N70131B\" \"N70131D\" \"N70141E\" \"N70141F\" \"N70141H\"\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_basemap()+\n  tm_shape(sf_sensors_raw |&gt;\n  filter(!(name %in% low_records_IDs)))+\n  tm_dots(col = \"black\",\n          alpha = 0.3,\n          group = \"Other sites\")+\n  tm_shape(sf_sensors_raw |&gt;\n             filter(name %in% low_records_IDs))+\n  tm_dots(col = \"red\",\n          group = \"Low record sites\")\n\n\n\n\n\n\n\n\n\ndaily_data &lt;- raw_data[between(year(MeasurementTime),2022,2023)\n             ][,GBtimestamp := with_tz(MeasurementTime,tzone = \"Europe/London\")\n               ][,`:=`(Date = date(GBtimestamp),\n                       Year = year(GBtimestamp))][\n                         ,.(records = .N,\n                            Flow = sum(VehicleFlow,na.rm = T)),\n                         by = .(LinkID, Date, Year)\n                       ]\n\nRecords per day per site by Year (max 288 5-minutes intervals)\n\ndaily_data[,.(records = mean(records)),\n  .(LinkID, Year)] |&gt; \nggplot(aes(records))+\n  geom_histogram(binwidth = 1,col = \"white\")+\n  facet_grid(Year~.)+\n  theme_light()\n\n\n\n\n\n\n\n\nTo identify the IDs with a low number of daily records, we run:\n\nlow_annual_IDs &lt;- unique(daily_data[,c(\"Year\",\"LinkID\",\"Date\")])[,\n                                               .(n_days = .N),\n                                               .(LinkID, Year)][n_days&lt;240] |&gt; pull(LinkID)\n\nThe IDs with low records match exactly the ones previously identified.\n\nidentical(low_annual_IDs,low_records_IDs)\n\n[1] TRUE\n\n\nThese IDs will be discarded as the available data might not be representative to produce AADF; if the ID is part of a group, the whole group will be discarded as AADF for the group can be affected.\n\ngroups_include &lt;- dir_groups |&gt; \n  mutate(not_include = (name %in% low_annual_IDs)*1) |&gt; \n  filter(sum(not_include)==0,.by = c(desc,dir_str,group_id)) |&gt;\n  select(-not_include) \n\n\n\nDaily flows sense check\n\ntotal_d_flow &lt;- daily_data |&gt; \n  inner_join(groups_include,by = c(\"LinkID\"=\"name\")) |&gt; \n  summarise(Flow = sum(Flow),.by=Date)\n\n\n  ggplot(total_d_flow,\n         aes(x=Date,y=Flow))+\n  geom_line() +\n  geom_point(data = total_d_flow |&gt;\n               filter (Flow&lt;500e3),\n             col = \"red\")+\n  geom_text(data = total_d_flow |&gt;\n               filter (Flow&lt;500e3),\n            aes(label = Date),\n             col = \"#020202\")\n\n\n\n\n\n\n\n\nThe daily flows on Christmas day are used a sensible threshold to identify outliers which will be discarded. It is assumed that the lowest traffic over the year occurs on that day.\n\nmin_Xmas &lt;- daily_data |&gt;\n  filter(day(Date)==25,month(Date)==12) |&gt; \n  summarise(Flow = sum(Flow),.by=c(Date)) |&gt; \n  pull(Flow) |&gt; \n  min()\n\ntotal_d_flow &lt;- daily_data |&gt; \n  inner_join(groups_include,by = c(\"LinkID\"=\"name\")) |&gt; \n  filter(sum(Flow)&gt;=(min_Xmas*0.99),.by=Date) |&gt; \n  summarise(Flow = sum(Flow),.by=Date)\n\n\n  ggplot(total_d_flow,\n         aes(x=Date,y=Flow))+\n  geom_line() +\n  geom_point(data = total_d_flow |&gt;\n               filter (Flow&lt;600e3),\n             col = \"red\")+\n  geom_text(data = total_d_flow |&gt;\n               filter (Flow&lt;600e3),\n            aes(label = Date),\n             col = \"#020202\")\n\n\n\n\n\n\n\n\n\n\nZero-flow sites check\n\nsite_d_flow &lt;- daily_data |&gt; \n  inner_join(groups_include,by = c(\"LinkID\"=\"name\")) |&gt; \n  filter(sum(Flow)&gt;=min_Xmas,.by=Date) |&gt; \n  summarise(Flow = sum(Flow),.by=c(Year,Date,group_id,subgroup_id)) \n\nno_flow_sites &lt;- site_d_flow |&gt;\n  summarise(Flow = sum(Flow),.by=c(group_id,subgroup_id)) |&gt;\n  filter(Flow == 0)\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_basemap()+\n  tm_shape(sf_counts |&gt;\n             anti_join(no_flow_sites,\n                       by = join_by(group_id,subgroup_id)))+\n  tm_dots(col = \"black\",alpha = 0.3,group = \"Other sites\")+\n  tm_shape(sf_counts |&gt;\n             semi_join(no_flow_sites,\n                       by = join_by(group_id,subgroup_id)))+\n  tm_dots(col = \"red\",group = \"Zero counts sites\")\n\n\n\n\n\n\n\n\n\n\nAnnual Average Daily Flow (AADF) calculation\n\naadf_data &lt;- site_d_flow |&gt; \n  anti_join(no_flow_sites,\n                       by = join_by(group_id,subgroup_id)) |&gt; \n  summarise(Flow = mean(Flow),.by = c(Year,group_id,subgroup_id)) |&gt; \n  pivot_wider(names_from = \"Year\",values_from = \"Flow\",names_prefix = \"flow.\")\n\n\n\n2022 vs 2023 flows high-level check\n\naadf_checks &lt;- aadf_data |&gt; \n  mutate(diff = flow.2023-flow.2022,\n         pdiff = diff/flow.2022) |&gt; \n  arrange(-abs(pdiff))\n\n\n  ggplot(data = aadf_checks,\n         aes(flow.2022,flow.2023))+\n  geom_smooth(formula = \"y ~ x+0\",method = \"lm\",se = F,alpha = 0.4)+\n  geom_point(shape = 19,alpha = 0.6)+\n  geom_point(data = aadf_checks |&gt;\n               filter(abs(pdiff)&gt;0.5|is.nan(pdiff)),\n             shape = 19,\n             alpha = 0.4,\n             size = 3,\n             col= \"red\")+\n  theme_light()+\n  coord_fixed()\n\n\n\n\n\n\n\n\n\nhigh_change_counts &lt;- aadf_checks |&gt;\n  filter(abs(pdiff)&gt;0.5|is.nan(pdiff))\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_basemap()+\n  tm_shape(sf_counts |&gt;\n             anti_join(high_change_counts,\n                       by = join_by(group_id,subgroup_id)))+\n  tm_dots(col = \"black\",alpha = 0.3,group = \"Other sites\")+\n  tm_shape(sf_counts |&gt;\n             semi_join(high_change_counts,\n                       by = join_by(group_id,subgroup_id)))+\n  tm_dots(col = \"red\",group = \"High change sites\")\n\n\n\n\n\n\n\n\nAlthough these changes seem suspicious, these records will not be discarded for the final analysis.\nThe spatial object with the counts is updated to be consistent with the AADF dataframe\n\nsf_counts_selected &lt;- sf_counts |&gt;\n  semi_join(aadf_data,\n            by = join_by(group_id,subgroup_id))\n\n\n\nStudy area bounds\n\nbuffer_distance = max(st_distance(sf_counts,sf_counts))*0.15\nlibrary(MinorRoadTraffic)\nbounds &lt;- sf_counts |&gt;\n  make_convex_hull(dist = buffer_distance)\n\n\n\n\nSaving results\nThe following code produces a csv file with the AADF of all sites, and geoJSON files for the grouped counts and the convex hull formed by them.\n\ndir.create(\"03_preprocessing_files\",showWarnings = F)\nwrite_csv(aadf_data,file = \"03_preprocessing_files/aadf_data.csv\",append = F)\n\ntry(file.remove(\"03_preprocessing_files/grouped_counts.geojson\"))\n\n[1] TRUE\n\nst_write(sf_counts_selected,\"03_preprocessing_files/grouped_counts.geojson\",append = F)\n\nWriting layer `grouped_counts' to data source \n  `03_preprocessing_files/grouped_counts.geojson' using driver `GeoJSON'\nWriting 188 features with 4 fields and geometry type Point.\n\ntry(file.remove(\"03_preprocessing_files/bounds.geoJSON\"))\n\n[1] TRUE\n\nst_write(bounds,\"03_preprocessing_files/bounds.geoJSON\")\n\nWriting layer `bounds' to data source \n  `03_preprocessing_files/bounds.geoJSON' using driver `GeoJSON'\nWriting 1 features with 0 fields and geometry type Polygon.",
    "crumbs": [
      "Preprocessing",
      "Count Data"
    ]
  },
  {
    "objectID": "1C_Road_network.html",
    "href": "1C_Road_network.html",
    "title": "Road Network",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dodgr)\nlibrary(osmextract)\n\nData (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright.\nCheck the package website, https://docs.ropensci.org/osmextract/, for more details.\n\nlibrary(sf)\n\nLinking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n\nlibrary(tmap)\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\nlibrary(stplanr)\nThe following code uses some functions compiled in the MinorRoadTraffic repository prepared by Malcolm Morgan and follows the process described in this vignette of the same package.\n# remotes::install_github(\"ITSLeeds/MinorRoadTraffic\") # if not installed\nlibrary(MinorRoadTraffic)\n\n\nAttaching package: 'MinorRoadTraffic'\n\n\nThe following object is masked from 'package:stplanr':\n\n    line_segment",
    "crumbs": [
      "Preprocessing",
      "Road Network"
    ]
  },
  {
    "objectID": "1C_Road_network.html#downloading-data",
    "href": "1C_Road_network.html#downloading-data",
    "title": "Road Network",
    "section": "Downloading data",
    "text": "Downloading data\nFor this analysis, OpenStreetMap will be used for the road network.\n\nosm_raw &lt;- oe_get(\"East Yorkshire with Hull\",\n                 extra_tags = c(\"ref\", \"highway\", \"junction\", \"maxspeed\",\"oneway\"))\n\nThe input place was matched with: East Yorkshire with Hull\n\n\nThe chosen file was already detected in the download directory. Skip downloading.\n\n\nThe corresponding gpkg file was already detected. Skip vectortranslate operations.\n\n\nReading layer `lines' from data source \n  `C:\\Users\\ts18jpf\\Documents\\OSMEXT_downloads\\geofabrik_east-yorkshire-with-hull-latest.gpkg' \n  using driver `GPKG'\nSimple feature collection with 77201 features and 13 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -4.03885 ymin: 51.265 xmax: 4.364931 ymax: 58.67265\nGeodetic CRS:  WGS 84\n\n\nAn alternative source can be the OS Open Roads.",
    "crumbs": [
      "Preprocessing",
      "Road Network"
    ]
  },
  {
    "objectID": "1C_Road_network.html#pre-processing-osm",
    "href": "1C_Road_network.html#pre-processing-osm",
    "title": "Road Network",
    "section": "Pre-Processing OSM",
    "text": "Pre-Processing OSM\n\nClipping road network\nThe study area bounds will be used to clip the road network.\n\nsf_counts &lt;- st_read(\"03_preprocessing_files/grouped_counts.geojson\")\n\nReading layer `grouped_counts' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\02_MsC\\99_GEOG5099M_Dissertation\\GEOG5099_Analysis\\03_preprocessing_files\\grouped_counts.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 188 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 505930.6 ymin: 428325.3 xmax: 513352.9 ymax: 433636.7\nProjected CRS: OSGB36 / British National Grid\n\nbounds &lt;- st_read(dsn = \"03_preprocessing_files/bounds.geoJSON\")\n\nReading layer `bounds' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\02_MsC\\99_GEOG5099M_Dissertation\\GEOG5099_Analysis\\03_preprocessing_files\\bounds.geoJSON' \n  using driver `GeoJSON'\nSimple feature collection with 1 feature and 0 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 504412.7 ymin: 426438.9 xmax: 514543.7 ymax: 434827.8\nProjected CRS: OSGB36 / British National Grid\n\n\n\nosm_clean = extract_from_osm(osm_raw,\n                             bounds,\n                             col_names = c(\"osm_id\",\"name\",\"ref\",\"highway\",\n                                           \"junction\",\"maxspeed\",\"geometry\",\"oneway\"))\n\nnetwork = osm_clean$network\nrm(osm_clean, osm_raw)\n\n\n\nFilling missing values\nThe ref attribute is filled based on the neighbouring links.\n\nnetwork_fill = osm_fill_ref2(network)\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5",
    "crumbs": [
      "Preprocessing",
      "Road Network"
    ]
  },
  {
    "objectID": "1C_Road_network.html#join-with-other-datasets",
    "href": "1C_Road_network.html#join-with-other-datasets",
    "title": "Road Network",
    "section": "Join with other datasets",
    "text": "Join with other datasets\n\nTraffic counts\n\naadf_data &lt;- read_csv(\n  \"03_preprocessing_files/aadf_data.csv\",\n  col_types = cols(\n    group_id = col_double(),\n    subgroup_id = col_double(),\n    flow.2022 = col_double(),\n    flow.2023 = col_double()\n    )\n  )\n\nJoining the counts and the spatial data\n\nsf_aadf &lt;- sf_counts |&gt; \n  left_join(aadf_data,by = join_by(group_id, subgroup_id))\n\nA quick visualisation\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_basemap(\"OpenStreetMap\")+\ntm_shape(bounds)+\n  tm_polygons(alpha = 0.3)+\n  tm_shape(network)+\n  tm_lines(col = \"orange\",alpha = 0.4)+\n  tm_shape(sf_aadf)+\n  tm_dots(col = \"blue\")\n\n\n\n\n\n\n\n\nIt is assumed that the locations of the loops are correct and the uncertainty of the coordinates is very small.\n\nThe assign_aadt_major of the MinorRoadsTraffic package uses voronoi diagrams to assign the traffic flows to the major roads of the network. The assignment will be different for this analysis for the following reasons:\n\nThe hull dataset has unidirectional traffic counts, as opposed to the bi-directional counts of the dataset by DfT .\nTraffic counts represent the flow in a specific section of the road links, other sections before and after adjacent junctions might be different.\n\nA graph is created using the dodgr package\n\nmajor_ref = c(\"motorway\",\n              \"motorway_link\",\n              \"primary\",\n              \"primary_link\",\n              \"trunk\",\n              \"trunk_link\")\n\ngraph &lt;- dodgr::weight_streetnet(network_fill,\n                                 keep_cols = c(\"name\",\"ref\",\"highway\",\"junction\",\"maxspeed\",\"oneway\"),\n                                 wt_profile = \"motorcar\"\n                                 )\n\nAs the network has been clipped, it is possible to find some disconnected parts from the main network, these smaller component will be discarded.\n\nmain_component &lt;- tibble(component = graph$component) |&gt; \n  count(component) |&gt;\n  filter(n == max(n)) |&gt;\n  pull(component)\n\ngraph_clean &lt;- graph[graph$component %in% main_component,]\n\nAn sf object is produced from the clean network\n\ngraph_sf &lt;- dodgr::dodgr_to_sf(graph_clean) |&gt; st_transform(27700)\n\nLinks within 20 metres from the count are considered and then filtered using the stated direction; then the nearest feature/link with the correct bearing is selected. If two or more counts are assigned to the same road link/graph, the mean flow is calculated.\n\ntraffic_buffer &lt;- sf_aadf |&gt; st_buffer(20)\n\nroad_intersects &lt;- st_intersects(traffic_buffer,graph_sf)\n\ndirs_tbl &lt;-\n  tibble(\n    dir_str = c(\n      \"southbound\",\n      \"westbound\",\n      \"northbound\",\n      \"eastbound\",\n      \"northeastbound\",\n      \"northwestbound\",\n      \"southeastbound\",\n      \"southwestbound\"\n    ),\n    t_bearing = c(180, -90, 0, 90,\n                  45, -45, -135, 135)\n  )\n\n#Bearing tolerance\nb_tolerance &lt;- 90\n\n\nsf_aadf$edge_id &lt;- vapply(seq_len(nrow(traffic_buffer)),\n       function(t_count){\n  str_dir_bearing &lt;- dirs_tbl$t_bearing[traffic_buffer$dir_str[t_count]==dirs_tbl$dir_str]\n  \n  sel_road_links = graph_sf[road_intersects[[t_count]],]\n  \n  if(nrow(sel_road_links)&gt;0) {\n    sel_road_links$bearing = stplanr::line_bearing(l = sel_road_links |&gt;\n                                                     st_transform(crs = 4326))\n    \n    sel_road_links$bearing_check = (str_dir_bearing - abs(sel_road_links$bearing))  &lt; b_tolerance\n    \n    sel_road_links = sel_road_links[sel_road_links$bearing_check, ]\n    \n    t_edge = sel_road_links[st_nearest_feature(sf_aadf[t_count, ], sel_road_links), ] |&gt;\n      st_drop_geometry()\n    \n    return(t_edge$edge_id)\n  } else{\n    return(NA_character_)\n  }\n  \n  },\n  character(1))\n\nedge_flow &lt;- sf_aadf |&gt;\n  st_drop_geometry() |&gt;\n  drop_na(edge_id) |&gt;\n  summarise(across(starts_with(\"flow\"),mean),.by = edge_id)\n\nA final version of the sf object of the network with the known flows is produced\n\ngraph_contr = dodgr::dodgr_contract_graph(graph_clean)\n\ngraph_sf_flows &lt;- graph_sf |&gt;\n  left_join(edge_flow,by=\"edge_id\")\n\ngraph_sf_flows$road_type &lt;-\n  dplyr::if_else(graph_sf_flows$highway %in% major_ref,\n                 \"major\",\n                 \"minor\")\n\nThe following map shows the road network and the flows that have been assigned\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(graph_sf_flows |&gt; filter(is.na(flow.2023)))+\n  tm_lines(\"grey\",lwd = 1)+\n  tm_shape(sf_aadf)+\n  tm_dots(\"blue\",alpha=0.5)+\n  tm_shape(graph_sf_flows |&gt; drop_na(flow.2023))+\n  tm_lines(\"flow.2023\",lwd = 1.5)\n\n\n\n\n\n\n\n\n\nJunctions\nJunctions are extracted from the contracted graph to avoid redundant nodes\n\njunctions &lt;- dodgr::dodgr_vertices(graph_contr) |&gt;\n  st_as_sf(coords = c(\"x\",\"y\"),\n           crs = 4326)\n\nJunctions will be classified as minor, major and minor-major depending on the adjacent links.\n\njunction_class_to &lt;- graph_sf_flows |&gt;\n  st_drop_geometry() |&gt;\n  summarise(count = n(),.by = c(to_id,road_type)) |&gt;\n  pivot_wider(names_from = road_type,values_from = count)|&gt; \n  rename(id = to_id)\n\njunction_class_from &lt;- graph_sf_flows |&gt;\n  st_drop_geometry() |&gt;\n  summarise(count = n(),.by = c(from_id,road_type)) |&gt;\n  pivot_wider(names_from = road_type,values_from = count) |&gt;\n  rename(id = from_id)\n\n\njunctions_classed &lt;- junction_class_to |&gt; \n  full_join(junction_class_from,by = \"id\",suffix = c(\".to\",\".from\")) |&gt; \n  mutate(jct_type = case_when(is.na(minor.to)&is.na(minor.from)~\"major\",\n                              is.na(major.to)&is.na(major.from)~\"minor\",\n                              (!is.na(minor.to)&!is.na(major.from))|\n                                (!is.na(minor.from)&!is.na(major.to))~\"minmaj\")) |&gt; \n  select(-starts_with(\"m\"))\nrm(junction_class_from,junction_class_to)\n\nMean incoming approach flows are calculated for all junctions, i.e. if a junction has 4 incoming roads/edges, an average of the 4 is calculated. Outgoing flows are not considered to avoid double-counting since the in and out flows should be the same.\n\njunctions_in_flows &lt;- graph_sf_flows |&gt;\n  st_drop_geometry() |&gt;\n  summarise(across(starts_with(\"flow\"),\\(x) mean(x,na.rm = T)),.by = c(to_id))|&gt; \n  rename(id = to_id)\n\n\njunctions_flows &lt;- junctions |&gt; \n  left_join(junctions_in_flows,by = \"id\") |&gt; \n  left_join(junctions_classed,by = \"id\")\nrm(junctions_classed,junctions_in_flows,junctions)\n\nThe following map shows the average flow in Minor-Major junctions.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(graph_sf_flows)+\n  tm_lines(\"#87CEFA\",lwd = 1)+\n  tm_shape(junctions_flows |&gt; filter(jct_type == \"minmaj\"))+\n  tm_dots(col = \"flow.2023\",size = 0.2, title = \"AADF 2023\")\n\n\n\n\n\n\n\n\n\n\n\nLSOA data\n\nlsoa_data &lt;- st_read(\"03_preprocessing_files/LSOA_data.geoJSON\")\n\nReading layer `LSOA_data' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\02_MsC\\99_GEOG5099M_Dissertation\\GEOG5099_Analysis\\03_preprocessing_files\\LSOA_data.geoJSON' \n  using driver `GeoJSON'\nSimple feature collection with 154 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 502749.4 ymin: 426282.2 xmax: 515986.2 ymax: 435961.4\nProjected CRS: OSGB36 / British National Grid\n\n\n\nedge_lsoa &lt;- graph_sf_flows |&gt;\n  select(edge_id) |&gt;\n  st_join(lsoa_data |&gt; select(LSOA21CD),\n          largest = T) |&gt;\n  st_drop_geometry()\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries",
    "crumbs": [
      "Preprocessing",
      "Road Network"
    ]
  },
  {
    "objectID": "1C_Road_network.html#network-metrics",
    "href": "1C_Road_network.html#network-metrics",
    "title": "Road Network",
    "section": "Network metrics",
    "text": "Network metrics\n\nRoad density\nThis is an improved version of the road_density function in the MinorRoadTraffic package\n\nzone_inter &lt;- sf::st_intersects(lsoa_data, graph_sf_flows)\n\nlsoa_data$road_km &lt;- pbapply::pbvapply(seq_along(zone_inter),\n                             function(zone) {\n                               t_zone &lt;- lsoa_data[zone,]\n                               line &lt;- graph_sf_flows[zone_inter[[zone]],]\n                               \n                               if (nrow(line) == 0) {\n                                 return(0)\n                               }\n                               \n                               line &lt;- sf::st_intersection(t_zone, line)\n                               return(sum(as.numeric(sf::st_length(line))) / 1000)\n                             },\n                             FUN.VALUE = numeric(1))\n\nlsoa_data_density &lt;-\n  lsoa_data |&gt; mutate(area_km2 = as.numeric(st_area(geometry)) / 1e6,\n                      road_density = road_km / area_km2)\n\nA map of the road density in \\(km/km^2\\):\n\ntm_shape(lsoa_data_density)+\n  tm_polygons(col = \"road_density\",\n              title = \"road km/sq.km\",\n              palette = \"Greens\",\n              border.col = \"grey\")\n\n\n\n\n\n\n\n\n\n\nJunction density\nSimilarly, the junction is calculated with the following code:\n\nlsoa_junctions &lt;- sf::st_intersects(lsoa_data,\n                                    junctions_flows |&gt; st_transform(27700))\n\nlsoa_data_density$jct_counts &lt;- pbapply::pbvapply(lsoa_junctions,length,integer(1))\n\nlsoa_data_density2 &lt;-\n  lsoa_data_density |&gt; mutate(area_km2 = as.numeric(st_area(geometry)) / 1e6,\n                      jct_density = jct_counts / area_km2)\n\nA map with the junction density\n\ntm_shape(lsoa_data_density2)+\n  tm_polygons(col = \"jct_density\",\n              title = \"Junctions/sq.km\",\n              palette = c(\"white\",\"blue\",\"darkblue\"),\n              border.col = \"grey\")\n\n\n\n\n\n\n\n\n\n\nCentrality\nBetweenness centrality is calculated using the contracted graph and dodgr\n\ngraph_centr &lt;- graph_contr |&gt; \n  dodgr_deduplicate_graph() |&gt; \n  dodgr_centrality(contract = T)\n\nAnd joined with the sf object of the network.\n\ntbl_centrality &lt;- tibble(edge_id = graph_centr$edge_id,\n       centrality = graph_centr$centrality)\n\ngraph_sf_centrality &lt;- graph_sf_flows |&gt;\n  left_join(tbl_centrality,by = join_by(edge_id))\n\nA map to explore the centrality results\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(graph_sf_centrality)+\n  tm_lines(col = \"centrality\",palette = \"viridis\",lwd = 1,style = \"fisher\")\n\n\n\n\n\n\n\n\n\n\nDistance from minor-major junctions\nFirst the mid-point of all lines are extracted\n\nmidpoints &lt;- dodgr::dodgr_to_sf(graph_clean) |&gt;\n  st_drop_geometry() |&gt;\n  select(edge_id) |&gt; \n  bind_cols(\n    dodgr::dodgr_to_sf(graph_clean) |&gt; \n  st_coordinates() |&gt; \n  data.frame() |&gt; \n  tibble() |&gt; \n  filter(row_number()==ceiling(n()/2),.by =L1) |&gt;\n  select(-L1)) |&gt; \n  # Extracting ids from uncontracted graph\n  left_join(graph_clean |&gt; dodgr_vertices(),\n            by = c(\"X\"=\"x\",\"Y\"=\"y\"))\n\nJunctions with known flows are sub-set and then distances from all mid-points to these junctions are calculated.\n\nid_jct_flows &lt;- junctions_flows |&gt; \n  filter(!is.na(flow.2023))\n\ntimes_matrix_flows &lt;- dodgr_times(graph_clean,\n                                  from = id_jct_flows$id,\n                                  to = midpoints$id,\n                                  shortest = F)\n\nUsing the times matrix, we extract the id of the nearest junction with known flows\n\nfastest_all &lt;- tibble(\n  id = \n    apply(times_matrix_flows, 2,\n          \\(x) {id_jct_flows$id[match(min(x), x)]}\n    ),\n  dist =\n    apply(times_matrix_flows, 2,\\(x) min(x,na.rm = TRUE)\n      )\n  )\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\nWarning in min(x, na.rm = TRUE): no non-missing arguments to min; returning Inf\n\n\n\nmidpoints_jct &lt;- midpoints |&gt; select(edge_id) |&gt; bind_cols(fastest_all)\n\ngraph_sf_centrality |&gt; left_join(midpoints_jct,by = join_by(edge_id)) |&gt; \n  tm_shape()+\n  tm_lines(\"dist\")",
    "crumbs": [
      "Preprocessing",
      "Road Network"
    ]
  },
  {
    "objectID": "1C_Road_network.html#saving-data",
    "href": "1C_Road_network.html#saving-data",
    "title": "Road Network",
    "section": "Saving data",
    "text": "Saving data\n\nnetwork_data &lt;- list(network = graph_sf_flows,\n                     junctions = junctions_flows,\n                     graph = graph)\nwrite_rds(network_data,file = \"03_preprocessing_files/network_data.rds\")\ntry(file.remove(\"03_preprocessing_files/raw_network.geoJSON\"))\nst_write(network_fill,\"03_preprocessing_files/raw_network.geoJSON\")\ntry(file.remove(\"03_preprocessing_files/sf_junctions.geoJSON\"))\nst_write(junctions_flows,\"03_preprocessing_files/sf_junctions.geoJSON\")",
    "crumbs": [
      "Preprocessing",
      "Road Network"
    ]
  }
]